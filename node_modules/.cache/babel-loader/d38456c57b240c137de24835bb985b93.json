{"ast":null,"code":"var _jsxFileName = \"/Users/ruxi/dev/displayTokensFromWallet/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { useEffect, useState } from \"react\";\nimport NFTContainer from './NFTContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [nfts, setNfts] = useState([]);\n\n  const detectProvider = () => {\n    let provider;\n\n    if (window.ethereum) {\n      provider = window.ethereum;\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else {\n      var homepage = \"https://metamask.io\";\n      window.alert(\"No Ethereum browser detected! Check out MetaMask\");\n\n      if (window.confirm(\"No Ethereum browser detected! Check out MetaMask\")) {\n        window.location.href = homepage;\n      }\n\n      ;\n    }\n\n    return provider;\n  };\n\n  const onLoginHandler = async () => {\n    const provider = detectProvider();\n\n    if (provider) {\n      if (provider !== window.ethereum) {\n        console.error(\"Not window.ethereum provider. Do you have multiple wallet installed ?\");\n      }\n    }\n  };\n\n  const connectWallet = async () => {\n    onLoginHandler();\n\n    if (typeof window.ethereum !== 'undefined') {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setWalletAddress(accounts[0]);\n    }\n  };\n\n  const getNFTData = async () => {\n    if (!walletAddress) return;\n    console.log(walletAddress); // const response = await fetch('https://api.rarible.org/v0.1/items/byOwner/?owner=ETHEREUM:0x60f80121c31a0d46b5279700f9df786054aa5ee5')\n\n    const response = await fetch(`https://api.rarible.org/v0.1/items/byOwner/?owner=ETHEREUM:${walletAddress}`);\n    const data = await response.json();\n    setNfts(data.items);\n  };\n\n  useEffect(() => {\n    getNFTData();\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text\",\n      children: [\"Account: \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"connect-button\",\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NFTContainer, {\n      nfts: nfts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WmPishZZuDK1DXhmsx6/GT0jRxA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ruxi/dev/displayTokensFromWallet/src/App.js"],"names":["useEffect","useState","NFTContainer","App","walletAddress","setWalletAddress","nfts","setNfts","detectProvider","provider","window","ethereum","web3","currentProvider","homepage","alert","confirm","location","href","onLoginHandler","console","error","connectWallet","accounts","request","method","getNFTData","log","response","fetch","data","json","items"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCJ,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMO,cAAc,GAAG,MAAM;AAC3B,QAAIC,QAAJ;;AACA,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBF,MAAAA,QAAQ,GAAGC,MAAM,CAACC,QAAlB;AACD,KAFD,MAEO,IAAID,MAAM,CAACE,IAAX,EAAiB;AACtBH,MAAAA,QAAQ,GAAGC,MAAM,CAACE,IAAP,CAAYC,eAAvB;AACD,KAFM,MAEA;AACL,UAAIC,QAAQ,GAAG,qBAAf;AACAJ,MAAAA,MAAM,CAACK,KAAP,CAAa,kDAAb;;AACA,UAAIL,MAAM,CAACM,OAAP,CAAe,kDAAf,CAAJ,EAAwE;AACtEN,QAAAA,MAAM,CAACO,QAAP,CAAgBC,IAAhB,GAAsBJ,QAAtB;AACD;;AAAA;AACF;;AACD,WAAOL,QAAP;AACD,GAdD;;AAgBA,QAAMU,cAAc,GAAG,YAAY;AACjC,UAAMV,QAAQ,GAAGD,cAAc,EAA/B;;AACA,QAAIC,QAAJ,EAAc;AACZ,UAAIA,QAAQ,KAAKC,MAAM,CAACC,QAAxB,EAAkC;AAChCS,QAAAA,OAAO,CAACC,KAAR,CACE,uEADF;AAGD;AACF;AACF,GATD;;AAWA,QAAMC,aAAa,GAAG,YAAY;AAChCH,IAAAA,cAAc;;AACd,QAAI,OAAOT,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMY,QAAQ,GAAG,MAAMb,MAAM,CAACC,QAAP,CAAgBa,OAAhB,CAAwB;AAACC,QAAAA,MAAM,EAAG;AAAV,OAAxB,CAAvB;AAEApB,MAAAA,gBAAgB,CAACkB,QAAQ,CAAC,CAAD,CAAT,CAAhB;AACD;AACF,GAPD;;AASA,QAAMG,UAAU,GAAG,YAAY;AAC7B,QAAG,CAACtB,aAAJ,EAAmB;AACnBgB,IAAAA,OAAO,CAACO,GAAR,CAAYvB,aAAZ,EAF6B,CAG7B;;AACA,UAAMwB,QAAQ,GAAG,MAAMC,KAAK,CAAE,8DAA6DzB,aAAc,EAA7E,CAA5B;AACA,UAAM0B,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAxB,IAAAA,OAAO,CAACuB,IAAI,CAACE,KAAN,CAAP;AAED,GARD;;AAUAhC,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,UAAU;AACX,GAFQ,EAEN,CAACtB,aAAD,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAE,MAAhB;AAAA,8BACYA,aADZ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAQ,MAAA,SAAS,EAAC,gBAAlB;AAAmC,MAAA,OAAO,EAAIkB,aAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAOE,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEhB;AAApB;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAlEQH,G;;KAAAA,G;AAoET,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { useEffect, useState } from \"react\";\nimport NFTContainer from './NFTContainer';\n\nfunction App() {\n\n  const [walletAddress, setWalletAddress] = useState(null)\n  const [nfts, setNfts] = useState([])\n\n  const detectProvider = () => {\n    let provider;\n    if (window.ethereum) {\n      provider = window.ethereum;\n    } else if (window.web3) {\n      provider = window.web3.currentProvider;\n    } else {\n      var homepage = \"https://metamask.io\";\n      window.alert(\"No Ethereum browser detected! Check out MetaMask\");\n      if (window.confirm(\"No Ethereum browser detected! Check out MetaMask\")) {\n        window.location.href= homepage;\n      };\n    }\n    return provider;\n  };\n\n  const onLoginHandler = async () => {\n    const provider = detectProvider();\n    if (provider) {\n      if (provider !== window.ethereum) {\n        console.error(\n          \"Not window.ethereum provider. Do you have multiple wallet installed ?\"\n        );\n      }\n    }\n  }\n\n  const connectWallet = async () => {\n    onLoginHandler()\n    if (typeof window.ethereum !== 'undefined') {\n      const accounts = await window.ethereum.request({method : 'eth_requestAccounts'});\n\n      setWalletAddress(accounts[0])\n    }\n  }\n\n  const getNFTData = async () => {\n    if(!walletAddress) return;\n    console.log(walletAddress);\n    // const response = await fetch('https://api.rarible.org/v0.1/items/byOwner/?owner=ETHEREUM:0x60f80121c31a0d46b5279700f9df786054aa5ee5')\n    const response = await fetch(`https://api.rarible.org/v0.1/items/byOwner/?owner=ETHEREUM:${walletAddress}`)\n    const data = await response.json()\n    setNfts(data.items)\n\n  }\n\n  useEffect(() => {\n    getNFTData()\n  }, [walletAddress])\n\n  return (\n    <div className=\"App\">\n      <div className= 'text'>\n        Account: {walletAddress}\n      </div>\n      <button className='connect-button' onClick = {connectWallet}>\n        Connect Wallet\n      </button>\n      <NFTContainer nfts={nfts}/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}